service: (record {lotteryDuration:nat64; ticketPrice:nat64}) -> {
    checkIfWinner: (int32) -> (variant {Ok:text; Err:variant {PaymentFailed:text; NotFound:text; NotWinner:text; LotteryError:text; ConfigError:text; PaymentCompleted:text; StateError:text}});
    createTicketOrder: (record {lotteryId:int32; noOfTickets:int32}) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; lotteryId:int32; amount:nat64; ticketBuyer:principal; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; NotFound:text; NotWinner:text; LotteryError:text; ConfigError:text; PaymentCompleted:text; StateError:text}});
    deleteLottery: (int32) -> (variant {Ok:text; Err:variant {PaymentFailed:text; NotFound:text; NotWinner:text; LotteryError:text; ConfigError:text; PaymentCompleted:text; StateError:text}});
    endLottery: (int32) -> (variant {Ok:text; Err:variant {PaymentFailed:text; NotFound:text; NotWinner:text; LotteryError:text; ConfigError:text; PaymentCompleted:text; StateError:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getCanisterAddress: () -> (text) query;
    getLotteries: () -> (vec record {id:int32; startTime:nat64; reward:opt nat64; endTime:nat64; winner:opt principal; winningTicket:opt int32; players:vec record {id:int32; tickets:vec int32; player:principal; lotteryId:int32}; noOfTickets:int32; lotteryCompleted:int32}) query;
    getLottery: (int32) -> (variant {Ok:record {id:int32; startTime:nat64; reward:opt nat64; endTime:nat64; winner:opt principal; winningTicket:opt int32; players:vec record {id:int32; tickets:vec int32; player:principal; lotteryId:int32}; noOfTickets:int32; lotteryCompleted:int32}; Err:variant {PaymentFailed:text; NotFound:text; NotWinner:text; LotteryError:text; ConfigError:text; PaymentCompleted:text; StateError:text}}) query;
    getLotteryConfiguration: () -> (record {nextLotteryId:opt int32; lotteryDuration:opt nat64; lotteryState:opt int8; ticketPrice:opt nat64; prizePool:opt nat64}) query;
    getOrders: () -> (vec record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; lotteryId:int32; amount:nat64; ticketBuyer:principal; paid_at_block:opt nat64}) query;
    getPendingOrders: () -> (vec record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; lotteryId:int32; amount:nat64; ticketBuyer:principal; paid_at_block:opt nat64}) query;
    registerTickets: (int32, int32, nat64, nat64, nat64) -> (variant {Ok:record {status:variant {PaymentPending:text; Completed:text}; memo:nat64; lotteryId:int32; amount:nat64; ticketBuyer:principal; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; NotFound:text; NotWinner:text; LotteryError:text; ConfigError:text; PaymentCompleted:text; StateError:text}});
    startLottery: () -> (variant {Ok:record {id:int32; startTime:nat64; reward:opt nat64; endTime:nat64; winner:opt principal; winningTicket:opt int32; players:vec record {id:int32; tickets:vec int32; player:principal; lotteryId:int32}; noOfTickets:int32; lotteryCompleted:int32}; Err:variant {PaymentFailed:text; NotFound:text; NotWinner:text; LotteryError:text; ConfigError:text; PaymentCompleted:text; StateError:text}});
}
